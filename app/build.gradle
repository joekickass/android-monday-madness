repositories {
    jcenter()
    flatDir {
        dirs 'libs'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'net.researchgate.release'
apply plugin: 'realm-android'

dependencies {
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.android.support:design:25.1.1'
    compile 'com.spotify.sdk:spotify-android-auth-1.0.0@aar'
    compile 'com.spotify.sdk:spotify-player-24-noconnect-2.20b@aar'
    compile 'uy.klutter:klutter-core:1.20.1'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta5'
}

if(rootProject.file("release.properties").exists()) {

    Properties props = new Properties()
    props.load(new FileInputStream(rootProject.file("release.properties")))

    android {
        signingConfigs {
            release {
                storeFile rootProject.file(props['storeFile'])
                storePassword props['storePassword']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }
    }
}

apply from: '../versioning.gradle'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "com.joekickass.mondaymadness"
        minSdkVersion 22
        targetSdkVersion 25
        versionCode buildVersionCode()
        versionName version
    }

    buildTypes {
        release {
            signingConfig signingConfigs.hasProperty('release') ? signingConfigs.release : signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
}

android.applicationVariants.all { variant ->
    renameApk(variant)
}

release {
    versionPropertyFile = 'gradle.properties'
    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
    }
}
